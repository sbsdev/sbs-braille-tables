<?xml version="1.0" encoding="UTF-8"?>
<project name="brailletables" default="deploy">

	<!-- used by "send": properties "recipient" and "greet" -->
	<property file="build.properties" />

	<!-- used by "stamp" -->
	<property name="stamp.properties" value="stamp.properties" />

	<!-- used by "deploy", "jar" and "plugin.xml" -->
	<property name="jarfile" value="${ant.project.name}.jar" />

	<!-- used by "jar" and "init" -->
	<property name="build.dir" value="bin" />

	<!-- used by "deploy" -->
	<property name="exe.dir" value="../bin" />

	<!-- used by "jar" -->
	<property name="app.manifest" value="MANIFEST.MF" />

	<!-- used by "compile" -->
	<property name="src.dir" value="src" />

	<path id="classpath.path">
		<pathelement location="${build.dir}" />
	</path>

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<presetdef name="my.javac">
		<javac includeantruntime="false" />
	</presetdef>

	<target name="clean" description="deletes built class files">
		<delete verbose="true">
			<fileset dir="${build.dir}" includes="**" />
		</delete>
	</target>

	<target name="compile" depends="init" description="compile project">
		<my.javac destdir="${build.dir}" deprecation="on" debug="on">
			<src path="${src.dir}" />
			<classpath>
				<path refid="classpath.path" />
			</classpath>
		</my.javac>
	</target>

	<target name="deploy" depends="compile" description="install classfile in bin where shell scripts refer to.">
		<copy todir="${exe.dir}" verbose="true">
			<fileset dir="${build.dir}" includes="**/*.class" excludes="**/*Test.class,**/*Tests.class" />
		</copy>
	</target>

	<target name="checkCmdlineParTag" unless="git.tag">
		<fail message="git.tag not set. Please provide it with cmd line parameter -Dgit.tag=..." />
	</target>

	<target name="tag" depends="checkCmdlineParTag" description="Tags project with tag given on the commandline with -Dgit.tag=...">
		<exec executable="git">
			<arg value="tag" />
			<arg value="${git.tag}" />
		</exec>
	</target>

	<target name="untag" depends="checkCmdlineParTag" description="removes tag given on the commandline with -Dgit.tag=...">
		<exec executable="git">
			<arg value="tag" />
			<arg value="-d" />
			<arg value="${git.tag}" />
		</exec>
	</target>

	<target name="jar" depends="compile, stamp, git.revision" description="create deployable jar file">
		<manifest file="${app.manifest}">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Build-Time" value="${release.time}" />
			<attribute name="Implementation-Version" value="${repository.version}" />
		</manifest>
		<jar destfile="${jarfile}">
			<fileset dir="${build.dir}">
				<exclude name="**/*Test.class" />
				<exclude name="**/*Tests.class" />
				<exclude name="**/*TestUtil.class" />
			</fileset>
			<fileset dir=".">
				<include name="${stamp.properties}" />
			</fileset>
		</jar>
		<echo>
			Built-By: ${user.name}
			Build-Time: ${release.time}
			Implementation-Version: ${repository.version}
			</echo>
	</target>

	<target name="stamp" depends="git.revision" description="generate file stamp.properties">
		<tstamp>
			<format property="release.time" pattern="dd.MM.yyyy HH:mm:ss" />
		</tstamp>
		<echo file="stamp.properties">
			# ${header.generated}
			stamp = ${repository.version}  (${release.time})
			</echo>
	</target>

	<!-- begin git stuff -->
	<available file=".git" type="dir" property="git.present" />

	<target name="git.diff">
		<exec executable="git" failifexecutionfails="false" errorproperty="">
			<arg value="diff" />
			<arg value="--quiet" />
		</exec>
	</target>

	<target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
		<!-- observed strange behaviour of git:
			 - If "git describe" is called, often "dirty" is indicated, even though everything is checked in.
			 - This can be fixed by calling "git diff" before.
		 -->
		<antcall target="git.diff" />
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--always" />
			<arg value="--dirty" />
		</exec>
		<echo>${git.revision}
		</echo>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>
	<!-- end git stuff -->

</project>
